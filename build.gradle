apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'idea'

/***************************************
 * Set Maven coordinates and build vars
 ***************************************/
// set from file gradle.properties

isRelease = !version.endsWith('SNAPSHOT')

//sourceCompatibility = 7

/***************************************
 * Check environment
 ***************************************/
javafxHome = System.env['JAVAFX_HOME']
if(!javafxHome) {
    println """Please set environment variable JAVAFX_HOME
to the directory that contains /rt/lib/jfxrt.jar
for JavaFX version $requiredJavaFxVersion"""
    System.exit 1
}

buildscript {
    dependencies {
        classpath files("${System.env['JAVAFX_HOME']}/rt/lib/jfxrt.jar")
    }
}
/*
actualJavaFXVersion = com.sun.javafx.runtime.VersionInfo.runtimeVersion
if (!actualJavaFXVersion.startsWith(requiredJavaFxVersion)) {
    println "Required JavaFX version is '$requiredJavaFxVersion' but actual version is '$actualJavaFXVersion'"
    System.exit(1)
}
*/
// environment is ok

/***************************************
 * The build script proper
 ***************************************/
repositories {
    mavenCentral()
}

dependencies {
    compile     files("${javafxHome}/rt/lib/jfxrt.jar")
    testCompile 'junit:junit:4.10'
    testCompile files("lib/jemmy.jar", "lib/JemmyAWT.jar", "lib/JemmyAWTInput.jar", "lib/JemmyBrowser.jar", "lib/JemmyCore.jar", "lib/JemmyFX.jar")
}

apply {
  from 'gradle/mavenCentralDeploy.gradle'
}

task buildTimestamped(type: Copy, dependsOn: 'build') {
    from 'build/libs'
    into 'build/libs/timestamped'
    include '*.jar'
    rename { String fileName ->
        fileName.replace('SNAPSHOT', "SNAPSHOT-${new Date().format('HH-mm-dd-MM-yyyy')}")
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-rc-3'
}

signArchives.onlyIf {
      hasProperty('signing.keyId')
}

uploadArchives.onlyIf {
      hasProperty('sonatypeUsername') && hasProperty('sonatypePassword')
}

task copyToLib(type: Copy) {
    into "_lib"
    from configurations.runtime
}
